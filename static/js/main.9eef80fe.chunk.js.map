{"version":3,"sources":["App.styles.ts","components/ListItem/styles.ts","components/ListItem/index.tsx","components/AddArea/styles.ts","components/AddArea/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Container","styled","div","Area","Header","h1","done","ListItem","item","taskDone","type","checked","onChange","e","id","target","name","toString","AddArea","onEnter","useState","inputText","setInputText","className","placeholder","value","onKeyUp","code","App","list","setList","handleTaskDone","newList","i","taskName","push","length","map","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MAEaA,EAAYC,IAAOC,IAAV,yGAMTC,EAAOF,IAAOC,IAAV,0FAMJE,EAASH,IAAOI,GAAV,uKCRNL,EAAaC,IAAOC,KAAK,gBAAGI,EAAH,EAAGA,KAAH,qUAgBVA,EAAO,eAAiB,UAhBd,gB,OCEzBC,EAAW,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,SAE7B,OACI,eAAC,EAAD,CAAaH,KAAME,EAAKF,KAAxB,UACG,uBACKI,KAAK,WACLC,QAASH,EAAKF,KACdM,SAAU,SAAAC,GAAC,OAAIJ,EAASD,EAAKM,GAAID,EAAEE,OAAOJ,YAE/C,kCAASH,EAAKQ,KAAd,OAA0BR,EAAKF,KAAKW,WAApC,WCfEjB,EAAYC,IAAOC,IAAV,gYCKTgB,EAAU,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,QAEtB,EAAoCC,mBAAS,IAA7C,mBAAQC,EAAR,KAAmBC,EAAnB,KASA,OACI,eAAC,EAAD,WACI,qBAAKC,UAAU,QAAf,oBACA,uBACIb,KAAK,OACLc,YAAY,sBACZC,MAAQJ,EACRT,SAAW,SAAAC,GAAC,OAAIS,EAAaT,EAAEE,OAAOU,QACtCC,QAfS,SAACb,GACH,UAAXA,EAAEc,MAAkC,KAAdN,IACtBF,EAAQE,GACRC,EAAa,YCwCVM,EAhDH,WAEV,MAAwBR,mBAAiB,CACvC,CAAEN,GAAI,EAAGE,KAAM,8BAA4BV,MAAM,GACjD,CAAEQ,GAAI,EAAGE,KAAM,6BAA8BV,MAAM,KAFrD,mBAAOuB,EAAP,KAAaC,EAAb,KAgBMC,EAAiB,SAACjB,EAAYR,GAClC,IAAI0B,EAAO,YAAOH,GAClB,IAAK,IAAII,KAAKD,EACRA,EAAQC,GAAGnB,KAAOA,IACpBkB,EAAQC,GAAG3B,KAAOA,GAGtBwB,EAAQE,IAGV,OACE,cAAC,EAAD,UACE,eAAC,EAAD,WACE,cAAC,EAAD,+BAEA,cAAC,EAAD,CAASb,QA1BO,SAACe,GACrB,IAAIF,EAAO,YAAOH,GAClBG,EAAQG,KAAK,CACXrB,GAAIe,EAAKO,OAAS,EAClBpB,KAAMkB,EACN5B,MAAM,IAGRwB,EAAQE,MAoBHH,EAAKQ,KAAI,SAAC7B,EAAM8B,GAAP,OACR,cAAC,EAAD,CAEI9B,KAAMA,EACNC,SAAUsB,GAFLO,YC7BJC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9eef80fe.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const Container = styled.div `\r\n    background-color: #17181f;\r\n    color: #797a81;\r\n    min-height: 100vh;\r\n`;\r\n\r\nexport const Area = styled.div `\r\n    margin: auto;\r\n    max-width: 980px;\r\n    padding: 10px;\r\n`;\r\n\r\nexport const Header = styled.h1 `\r\n    margin: 0;\r\n    padding: 0;\r\n    color: #fff;\r\n    text-align: center;\r\n    border-bottom: 1px solid #444;\r\n    padding-bottom: 20px;\r\n`;","import styled from 'styled-components';\r\n\r\ntype ContainerProps = {\r\n    done: boolean;\r\n}\r\n\r\nexport const Container =  styled.div( ({ done } : ContainerProps ) => (`\r\n    display: flex;\r\n    background-color: #20212c;\r\n    padding: 10px;\r\n    border-radius: 10px;\r\n    margin-bottom: 10px;\r\n    align-items: center;\r\n\r\n    input {\r\n        width: 25px;\r\n        height: 25px;\r\n        margin-right: 5px;\r\n    }\r\n\r\n    label {\r\n        color: #CCC;\r\n        text-decoration: ${ done ? 'line-through' : 'initial' };\r\n    } `\r\n));","import * as C from './styles';\r\nimport { Item } from '../../types/Item';\r\n\r\ntype Props = {\r\n    item: Item,\r\n    taskDone: (id: number, done: boolean) => void\r\n}\r\n\r\nexport const ListItem = ({ item, taskDone } : Props) => {\r\n\r\n    return (\r\n        <C.Container done={item.done}>\r\n           <input \r\n                type=\"checkbox\" \r\n                checked={item.done}\r\n                onChange={e => taskDone(item.id, e.target.checked)} \r\n           />\r\n           <label>{ item.name } - ({ item.done.toString() })</label>\r\n        </C.Container>\r\n    );\r\n}","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div `\r\n    border: 1px solid #555;\r\n    border-radius: 15px;\r\n    padding: 10px;\r\n    margin: 20px 0;\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    .image {\r\n        margin-right: 5px;\r\n    }\r\n\r\n    input {\r\n        border: 0;\r\n        background: transparent;\r\n        outline: 0;\r\n        color: #FFF;\r\n        font-size: 18px;\r\n        flex: 1;\r\n    }\r\n`;","import { useState, KeyboardEvent } from 'react'; \r\nimport * as C from './styles';\r\n\r\ntype Props = {\r\n    onEnter: (taskName: string) => void\r\n}\r\n\r\nexport const AddArea = ({ onEnter } : Props) => {\r\n\r\n    const [ inputText, setInputText ] = useState('');\r\n\r\n    const handleKeyUp =  (e: KeyboardEvent) => {\r\n        if (e.code === 'Enter' && inputText !== '') {\r\n            onEnter(inputText);\r\n            setInputText('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <C.Container>\r\n            <div className=\"image\">➕</div>\r\n            <input \r\n                type=\"text\" \r\n                placeholder='Adicione uma tarefa'\r\n                value={ inputText }\r\n                onChange={ e => setInputText(e.target.value) }\r\n                onKeyUp={ handleKeyUp }\r\n            />\r\n        </C.Container>\r\n    );\r\n}","import { useState } from 'react';\r\nimport * as C from './App.styles';\r\nimport { Item } from './types/Item';\r\nimport { ListItem } from './components/ListItem';\r\nimport { AddArea } from './components/AddArea';\r\n\r\nconst App = () => {\r\n\r\n  const [list, setList] = useState<Item[]>([\r\n    { id: 1, name: 'Comprar o pão na padaria', done: false },\r\n    { id: 2, name: 'Comprar um bolo na padaria', done: true }\r\n  ]);\r\n\r\n  const handleAddTask = (taskName: string) => {\r\n    let newList = [...list];\r\n    newList.push({\r\n      id: list.length + 1,\r\n      name: taskName,\r\n      done: false\r\n    });\r\n\r\n    setList(newList);\r\n  }\r\n\r\n  const handleTaskDone = (id: number, done: boolean) => {\r\n    let newList = [...list];\r\n    for (let i in newList) {\r\n      if (newList[i].id === id) {\r\n        newList[i].done = done;\r\n      }\r\n    }\r\n    setList(newList);\r\n  }\r\n\r\n  return (\r\n    <C.Container>\r\n      <C.Area>\r\n        <C.Header>Lista de Tarefas</C.Header>\r\n\r\n        <AddArea onEnter={ handleAddTask } />\r\n\r\n        {list.map((item, index) => (\r\n          <ListItem \r\n              key={index} \r\n              item={item}\r\n              taskDone={handleTaskDone} \r\n            />\r\n        ))}\r\n\r\n      </C.Area>\r\n    </C.Container>\r\n  );\r\n}\r\n\r\nexport default App;","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}